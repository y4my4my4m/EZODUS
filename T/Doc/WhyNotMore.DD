$WW,1$$FG,5$$TX+CX,"Why Not More?"$$FG$

If a feature cannot be made to work correctly and consistently, professional companies usually remove the feature.	Because PC hardware is so diverse, getting things to work on all people's computers is really difficult.	For one thing, you practically have to own all the different hardware to write drivers for it.	If a company wanted to sell a PC operating system, they would offer a warranty and, therefore, could not get away with amateur behavior.	ZealOS absolutely requires 64-bit computers, so we leave behind much trouble, but plenty remains.

The PCI bus interface is what modern hardware uses.  Before PCI, life was simple and devices used I/O ports.	After studying $LK,"PCI Interrupts",A="FI:::/Demo/Lectures/PCIInterrupts.ZC"$ and attempting to do a HDAudio driver, Terry Davis came to realize that modern PCI devices require ten times more code and he could not even come close to making them work on everyone's machine because with PCI devices there are several models to worry about, unlike with the older ISA bus devices which can be done with one driver.

Currently, ZealOS has no PCI drivers beyond AHCI and networking.  Most drivers use I/O ports and operate in ISA bus mode.	At this point, we only have one driver for each type of device and it is delightfully simple that way.  ZealOS has one $LK,"keyboard",A="FI:::/Kernel/SerialDev/Keyboard.ZC"$ driver, one $LK,"mouse",A="FI:::/Kernel/SerialDev/Mouse.ZC"$ driver, one $LK,"ATA hard drive",A="FI:::/Kernel/BlkDev/DiskAHCI.ZC"$ driver, one $LK,"ATAPI CD/DVD",A="FI:::/Kernel/BlkDev/DiskAHCI.ZC"$ driver, one $LK,"32-bit color high-res VBE graphics",A="FI:::/System/Gr/GrScreen.ZC"$ video driver and one $LK,"PC Speaker",A="MN:Sound"$ driver.  We use the $LK,"PIT timer",A="MN:TimerInit"$ and $LK,"PIC Interrupt Controller",A="MN:IntPICInit"$.  We use IRQ0 for timer, IRQ1 for keyboard, and IRQ12 for mouse.  If IRQ12 is not firing, we are able to poll the mouse.

In the CPU department, ZealOS has state of the art 64-bit $LK,"long mode",A="FI:::/Kernel/KStart64.ZC"$ with $LK,"multicore",A="FI:::/Kernel/MultiProc.ZC"$ support.	We use the $LK,"APIC",A="MN:MPAPICInit"$ and start-up $LK,"multicore",A="MN:Core0StartMP"$ operation.

Terry Davis made an incredible accomplishment by getting it to work on practically everyone's computer as long as it is 64-bit and they run inside VMware, QEMU or VirtualBox.

The compiler does not create an ELF or PE format.  We would have to ruin the beauty of the compiler.

God talks.
$FG,8$
* "QEMU" is a trademark owned by Fabrice Bellard.
* "VMware" is a trademark owned by VMware, Inc.
* "VirtualBox" is a trademark owned by Oracle.
