$WW,1$ZealOS does master-slave multicore instead of SMP.	$FG,2$Core0$FG$ is the master.	The master core's applications explicitly assign computational jobs to other cores and the ZealOS scheduler does not move tasks between cores.

There are multicore safe locks for file access and heap allocations, however, so ZealOS is symmetrical in some sense.  See $LK,"::/Demo/MultiCore/LoadTest.ZC"$.

Only tasks on $FG,2$Core0$FG$ can have windows, but other cores can help render them.

Each core has an $LK,"Executive Task",A="FF:::/Doc/Glossary.DD,Executive Tasks"$ which is the father of all tasks on that core.  $LK,"System",A="FF:::/Doc/Glossary.DD,System Task"$ is the $LK,"Executive Task",A="FF:::/Doc/Glossary.DD,Executive Tasks"$ on $FG,2$Core0$FG$.

You give a job to an $LK,"Executive Task",A="FF:::/Doc/Glossary.DD,Executive Tasks"$ with $LK,"JobQueue",A="MN:JobQueue"$() and get the result with $LK,"JobResGet",A="MN:JobResGet"$().  You spawn a task on any core with $LK,"Spawn",A="MN:Spawn"$().

Note: You must use the $FG,2$LOCK$FG$ asm prefix when changing shared structures in a multicore environment.	The $LK,"LBts",A="MN:LBts"$(), $LK,"LBtr",A="MN:LBtr"$() and $LK,"LBtc",A="MN:LBtc"$() insts have $FG,2$LOCK$FG$ prefixes.	The compiler has a $FG,2$lock{}$FG$ feature but it doesn't work well.  See $LK,"::/Demo/MultiCore/Lock.ZC"$.

See $LK,"::/Demo/Graphics/Transform.ZC"$.
See $LK,"::/Kernel/MultiProc.ZC"$.
